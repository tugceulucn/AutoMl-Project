import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC

def load_data(file_path):
    if file_path.endswith('.csv'):
        return pd.read_csv(file_path)
    elif file_path.endswith('.json'):
        return pd.read_json(file_path)
    else:
        raise ValueError("Unsupported file format. Please provide a CSV or JSON file.")

def preprocess_data(df, target_column):
    X = df.drop(target_column, axis=1)
    y = df[target_column]
    
    le = LabelEncoder()
    X = X.apply(lambda col: le.fit_transform(col) if col.dtype == 'object' else col)
    y = le.fit_transform(y) if y.dtype == 'object' else y
    
    return X, y, le

def svm():
    file_path = input("Veri seti dosya yolunu girin (csv veya json): ")
    target_column = input("Hedef değişkenin adını girin: ")
    test_size = float(input("Test setinin oranını girin (0-1 arası): "))
    random_state = int(input("Random state değerini girin: "))
    
    df = load_data(file_path)
    X, y, le = preprocess_data(df, target_column)
    
    model = SVC()
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)
    
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Model Accuracy: {accuracy}")
    
    print("Kolonlar:", list(X.columns))
    predict_data = [input(f"{col} için değer girin: ") for col in X.columns]
    predict_data = np.array(predict_data).reshape(1, -1)
    predict_data = le.transform(predict_data)
    
    prediction = model.predict(predict_data)
    print(f"Tahmin edilen değer: {prediction[0]}")

if _name_ == "_main_":
    svm()